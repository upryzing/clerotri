diff --git a/lib/index.js b/lib/index.js
index 83500ac79cab50219b7f70e25c209bac84168123..fc1b3929461a5cacd1eb15768c85f182f0a1a655 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -66,7 +66,7 @@ function MetroSerializer(metroPlugins = [], buildOptions) {
         // esbuild 0.14.49, we can use the `hermes` target instead of `es5`. Note
         // that this target is somewhat conservative and may require additional
         // Babel plugins.
-        const target = buildOptions?.target ?? "hermes0.7.0";
+        const target = buildOptions?.target ?? "hermes0.14.0";
         const { dependencies } = graph;
         const metroPlugin = {
             name: require("../package.json").name,
@@ -230,7 +230,7 @@ function MetroSerializer(metroPlugins = [], buildOptions) {
             ],
             legalComments: "none",
             logLevel: buildOptions?.logLevel ?? "error",
-            metafile: Boolean(buildOptions?.analyze || buildOptions?.metafile),
+            metafile: true, // Boolean(buildOptions?.analyze || buildOptions?.metafile),
             minify: buildOptions?.minify ?? !options.dev,
             minifyWhitespace: buildOptions?.minifyWhitespace,
             minifyIdentifiers: buildOptions?.minifyIdentifiers,
@@ -238,7 +238,7 @@ function MetroSerializer(metroPlugins = [], buildOptions) {
             outfile,
             plugins,
             pure: buildOptions?.pure,
-            sourcemap: Boolean(options.sourceMapUrl) && "linked",
+            sourcemap: true, // Boolean(options.sourceMapUrl) && "linked",
             target,
             supported: (() => {
                 if (typeof target !== "string" || !target.startsWith("hermes")) {
@@ -277,8 +277,8 @@ function MetroSerializer(metroPlugins = [], buildOptions) {
                         .analyzeMetafile(metafile, options)
                         .then((text) => (0, console_1.info)(text));
                 }
-                if (typeof buildOptions?.metafile === "string") {
-                    fs.writeFileSync(path.join(path.dirname(sourcemapfile), buildOptions.metafile), typeof metafile === "string" ? metafile : JSON.stringify(metafile));
+                if (true /* typeof buildOptions?.metafile === "string" */) {
+                    fs.writeFileSync(path.join(path.dirname(sourcemapfile), 'dist/sus.json' /* buildOptions.metafile */), typeof metafile === "string" ? metafile : JSON.stringify(metafile));
                     (0, console_1.info)("esbuild bundle size:", result.code.length);
                 }
             }
